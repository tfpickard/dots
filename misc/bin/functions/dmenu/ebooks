# sdothum - 2016 (c) wtfpl

# X11 Dynamic Menu
# ══════════════════════════════════════════════════════════════════════════════

# ...................................................................... E-books

# Usage: dmenu ebooks [I [cache]]

REBUILD='[ rebuild database ]'

# ebook library
[ "$1" = I ] && { init=true; shift; }
library=${LIBRARY:-/net/media/ebooks/${1:-library}}
cache=$library/dmenu:ebooks

# ....................................................................... Libary

# build catalogue
ebooks() {
  notify low 'Updating library cache' 'Please be patient..'
  find $library -maxdepth 4 -regex ".*\(mobi\|epub\|azw3\|azw\|kfx\)" |
      sed -re "s|$library/[^/]*/([^/]*)/(.*/)*([^/]*)\.(mobi\|epub\|azw3\|azw\|kfx)|\1$SEP\3|" \
          -e 's/(.*) - .*/\1/; s/ \(.*\)//' \
          -e "s/(.*)$SEP(.*)/\2^$SEP \1/" |
      sort -u >$cache
  notify low 'Update of library cache' '..Complete'
  sleep 1
}

# command line initialization with: dmenu ebooks [init]
if [ ! -s $cache ] || [ $init ] || stest -qr -n $cache $(find $library -maxdepth 3) ;then
  ebooks $1
  [ $init ] && exit
fi

file() {
  # convert apostrophe ' to ? for pattern matching
  path=$(echo $book | sed -r "s/'/./" -e "s|^(.*)  *${SEP}  *(.*)|.*\2/(\1[^/]*/)*\1( - .*)*.$1|")
  find $library -regextype egrep -regex "$path"
}

mobi() { mobi=$(file mobi); }
epub() { epub=$(file epub); }
azw3() { azw3=$(file azw3); }
azw()  { azw=$(file azw); }
kfx()  { kfx=$(file kfx); }

catlg() {
  if grep -q "$book" $HISTORY/ebooks ;then
    grep -v "$book" $HISTORY/ebooks >/tmp/ebooks
    mv /tmp/ebooks $HISTORY/ebooks
  fi
  book=$(echo ${file%/*} | sed -r 's/([ ()])/\\\1/g')
  term "$title" vifm "${book%/*}" "$book"
  pwait vifm
}

# .................................................................. Select book

while : ;do
  book=$(cat $cache | mhistory ebooks | column -s^ -t | sed "1i$REBUILD" | rmenu "E-book" 1 -filter \"$author\" -no-custom)

  # return loop filtered by author, allow escape to clear filter!
  if [ -z "$book" ] ;then
    [ "$author" ] && { unset author; unset matching; continue; } || exit
  elif [ "$book" = "$REBUILD" ] ;then
    ebooks init; continue
  fi

  author="${book#*$SEP } "
  title=${book%$SEP*}
  title=$(echo $title | sed 's/ *$//g')
  unset mobi epub azw3 azw

  azw3; [ "$azw3" ] || { mobi; [ "$mobi" ] || { epub; [ "$epub" ] || { azw; [ "$azw" ] || kfx; } } }
  file=$azw3$mobi$epub$azw$kfx
  [ "$file" ] || { sed -i "/$title.$SEP ${author% }/d" $HISTORY/ebooks; continue; }

  # [ -d $kindle ] && options='kindle\nedit\nread' || options='read\nedit\nkindle'
  options='kindle\nedit\nread'
  while action=$(echo "$options" | rmenu "$title" $action -no-custom) || break ;do
    mhistory ebooks "$(echo $book | sed "s/ *$SEP/^$SEP/")"
    case $action in
    read  ) [ $focus ] || { focus frame; focus=true; }; FBReader "$file" ;;
    edit  ) catlg; ebooks ;;
    kindle) dmenu kindle "$file" ;;
    esac
    break
  done
  # show list of author's books next
  export matching=normal
done

# vim: set ft=sh: #
