# ^F is easier to press

run "zsh -c \"[[ -d ~/.tmux/plugins/tpm ]] || [[ -d ~/.tmux/plugins ]] || \
echo \"installing tpm...\" ; (mkdir -p ~/.tmux/plugins; \
git clone https://github.com/tmux-plugins/tpm)\""

unbind C-b
unbind C-a
#set -g prefix C-f
#bind C-f send-prefix

# from jeliser
# Set the prefix keys.  Keep the legacy Ctrl-A for screens people, but I prefer
# the single key `
set -g prefix 'C-a'
set -g prefix2 'M-C-S-F12'
bind-key 'C-a' send-prefix
bind-key 'M-C-S-F12' send-prefix

# use good colors
##set -g default-terminal xterm-256color


# act like vim / copy paste stuff
setw -g mode-keys vi
unbind [
bind f copy-mode
unbind p
bind p paste-buffer
# Use v to trigger selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
# Use y to yank current selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# from <https://github.com/christoomey/vim-tmux-navigator>
# Smart pane switching with awareness of vim splits
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# restore overwritten C-l binding (clear screen)
bind C-l send-keys 'C-l'

# ease of use (prefer visual splits)
unbind %
unbind '"'
bind '-' split-window
bind '\' split-window -h
#bind '_' split-window -h
#bind '|' split-window -h

bind-key [ previous-window
bind-key ] next-window

bind-key r command-prompt 'rename-window %%'
bind-key R command-prompt 'rename-session %%'

# Start numbering at 1 (easier to switch between a few screens)
set -g base-index 1
setw -g pane-base-index 1

# toggle status line
bind T set-option -g status

# put statusline on top
set-option -g status-position top
## looks

set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-option -g bell-action none
setw -g clock-mode-colour colour5
setw -g mode-attr bold
setw -g mode-fg colour1
setw -g mode-bg colour18
# panes
set -g pane-border-bg colour0
set -g pane-border-fg colour19
set -g pane-active-border-bg colour0
set -g pane-active-border-fg colour9

#set -g status "on"
#set -g status-bg "colour0"
#set -g status-attr "none"
#set -g status-left-length "100"
#set -g status-right-length "100"
#set -g status-right "#[fg=colour7]#S"
#set -g status-left ""

set -g message-command-fg "colour10"
set -g message-command-bg "colour0"
set -g message-fg "colour10"
set -g message-bg "colour0"

set -g pane-active-border-fg "colour10"
set -g pane-border-fg "colour8"
## # Status
set -g status-left ''
#set-option -g status-left "#[fg=blue,bright]#(gcalcli agenda | head -2 | tail -1)#[default]"
set -g status-right '#[fg=#689d6a,bold]#T #[fg=#b16286]∙ \
#[fg=#d79921]%B#[fg=#98971a] %d,#[fg=#cc241d] %Y ∙ #[fg=#458588]%R '
#seet -g status-right '#[fg=black,bold]#T #[fg=magenta]∙ #[fg=yellow]%B#[fg=green] %d,#[fg=red] %Y #[fg=blue]%R '
set -g status-right-length 100
set -g status-bg default

#setw -g window-status-fg "colour10"
#setw -g window-status-bg "colour0"
#setw -g window-status-activity-bg "colour0"
#setw -g window-status-activity-fg "colour10"
#setw -g window-status-separator ""
### setw -g window-status-current-format "#[fg=colour15] #[fg=colour7]#W "
#setw -g window-status-current-format '#[fg=white,bg=green,bold] #I #[fg=black,bg=white,bold] #W '
### setw -g window-status-format "#[fg=colour8]#I #W "
#setw -g window-status-format '#[fg=cyan,bold,bg=black] #I #[fg=white,bold,bg=magenta] #W '




# switch windows meta+number
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

# Break pane and move to new window
# bind ` break-pane

# Swap pane
bind-key -n M-Down swap-pane -D  # swap current pane with the next one
bind-key -n M-Up swap-pane -U  # swap current pane with the previous one

# Change window order
bind-key -n M-Left swap-window -t -1
bind-key -n M-Right swap-window -t +1

# Zoom pane
bind f resize-pane -Z

# Go to previous pane
bind-key M-f last-window
bind-key -n M-o last-window

# Kill tmux session
bind 0 kill-session

# Enable mouse input
set -g mouse on

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows
set -g renumber-windows on

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# To copy, left click and drag to highlight text in yellow,
# once you release left click yellow text will disappear and will automatically be available in clibboard
# # Use vim keybindings in copy mode
# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind -T root MouseDown2Pane run -b "xclip -o | tmux load-buffer - && tmux paste-buffer -s ' '"

# Activity monitoring
#setw -g monitor-activity on
#set -g visual-activity on

# switch between modes
bind-key -n M-1 select-layout even-horizontal
bind-key -n M-2 select-layout even-vertical
bind-key -n M-3 select-layout main-horizontal
bind-key -n M-4 select-layout main-vertical
bind-key -n M-5 select-layout tiled

# Join a pane; enter the source window (and, optionally, pane)
# ":1" or ":1.1"
bind-key J command-prompt -p "Join pane from:" "join-pane -s :'%%'"
# Send a pane to another window; enter the destination window
# ":1" or "sessionName.:1"
bind-key S command-prompt -p "Send pane to:" "join-pane -t :'%%'"

# set to main-horizontal, 60% height for main pane
bind m set-window-option main-pane-height 60\; select-layout main-horizontal
set-window-option -g utf8 on
# Creating new window
bind-key -n M-c new-window
bind-key c command-prompt -p "Name of new window: " "new-window -n '%%'"
# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# reload config
bind r source-file ~/.tmux.conf \; display-message "Tmux configuration reloaded."

# color
set -g default-terminal "screen-256color"

# vim mode
bind-key -T copy-mode-vi 'v' send -X begin-selection

# Seamless trasition between vim and tmux
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
bind-key -n M-\ if-shell "$is_vim" "send-keys M-\\" "select-pane -l"

# source all tmux plugins
run '~/.tmux/plugins/tpm/tpm'
set -g @plugin 'tmux-plugins/tmux-net-speed'
